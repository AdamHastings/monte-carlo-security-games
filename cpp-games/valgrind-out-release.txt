==21745== Memcheck, a memory error detector
==21745== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21745== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==21745== Command: ./run/release/run_games configs/test_tiny.json
==21745== Parent PID: 21671
==21745== 
--21745-- 
--21745-- Valgrind options:
--21745--    --leak-check=full
--21745--    --show-leak-kinds=all
--21745--    --track-origins=yes
--21745--    --verbose
--21745--    --log-file=valgrind-out-release.txt
--21745-- Contents of /proc/version:
--21745--   Linux version 5.3.0-7648-generic (buildd@lcy01-amd64-012) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #41~1586790036~18.04~600aeb5-Ubuntu SMP Mon Apr 13 17:47:15 UTC 
--21745-- 
--21745-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--21745-- Page sizes: currently 4096, max supported 4096
--21745-- Valgrind library directory: /usr/lib/valgrind
--21745-- Reading syms from /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games
--21745-- Reading syms from /lib/x86_64-linux-gnu/ld-2.27.so
--21745--   Considering /lib/x86_64-linux-gnu/ld-2.27.so ..
--21745--   .. CRC mismatch (computed 2977d8b2 wanted c64f09ed)
--21745--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/ld-2.27.so ..
--21745--   .. CRC is valid
--21745-- Reading syms from /usr/lib/valgrind/memcheck-amd64-linux
--21745--   Considering /usr/lib/valgrind/memcheck-amd64-linux ..
--21745--   .. CRC mismatch (computed 41ddb025 wanted 9972f546)
--21745--    object doesn't have a symbol table
--21745--    object doesn't have a dynamic symbol table
--21745-- Scheduler: using generic scheduler lock implementation.
--21745-- Reading suppressions file: /usr/lib/valgrind/default.supp
==21745== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21745-by-adam-on-???
==21745== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21745-by-adam-on-???
==21745== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21745-by-adam-on-???
==21745== 
==21745== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21745== don't want to do, unless you know exactly what you're doing,
==21745== or are doing some strange experiment):
==21745==   /usr/lib/valgrind/../../bin/vgdb --pid=21745 ...command...
==21745== 
==21745== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21745==   /path/to/gdb ./run/release/run_games
==21745== and then give GDB the following command
==21745==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21745
==21745== --pid is optional if only one valgrind process is running
==21745== 
--21745-- REDIR: 0x4020d20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580608c1 (???)
--21745-- REDIR: 0x4020b00 (ld-linux-x86-64.so.2:index) redirected to 0x580608db (???)
--21745-- Reading syms from /usr/lib/valgrind/vgpreload_core-amd64-linux.so
--21745--   Considering /usr/lib/valgrind/vgpreload_core-amd64-linux.so ..
--21745--   .. CRC mismatch (computed 50df1b30 wanted 4800a4cf)
--21745--    object doesn't have a symbol table
--21745-- Reading syms from /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so
--21745--   Considering /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so ..
--21745--   .. CRC mismatch (computed f893b962 wanted 95ee359e)
--21745--    object doesn't have a symbol table
==21745== WARNING: new redirection conflicts with existing -- ignoring it
--21745--     old: 0x04020d20 (strlen              ) R-> (0000.0) 0x580608c1 ???
--21745--     new: 0x04020d20 (strlen              ) R-> (2007.0) 0x04c34db0 strlen
--21745-- REDIR: 0x401d540 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4c35ee0 (strcmp)
--21745-- REDIR: 0x4021260 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4c394f0 (mempcpy)
--21745-- Reading syms from /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.32
--21745--    object doesn't have a symbol table
--21745-- Reading syms from /lib/x86_64-linux-gnu/libm-2.27.so
--21745--   Considering /lib/x86_64-linux-gnu/libm-2.27.so ..
--21745--   .. CRC mismatch (computed 4e7cf542 wanted 8d27f134)
--21745--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libm-2.27.so ..
--21745--   .. CRC is valid
--21745-- Reading syms from /lib/x86_64-linux-gnu/libgcc_s.so.1
--21745--    object doesn't have a symbol table
--21745-- Reading syms from /lib/x86_64-linux-gnu/libc-2.27.so
--21745--   Considering /lib/x86_64-linux-gnu/libc-2.27.so ..
--21745--   .. CRC mismatch (computed f250d419 wanted 4aacab51)
--21745--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so ..
--21745--   .. CRC is valid
--21745-- REDIR: 0x58fda50 (libc.so.6:memmove) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fcd60 (libc.so.6:strncpy) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fdd30 (libc.so.6:strcasecmp) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fc7b0 (libc.so.6:strcat) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fcd90 (libc.so.6:rindex) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58ff480 (libc.so.6:rawmemchr) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fdbc0 (libc.so.6:mempcpy) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fd9f0 (libc.so.6:bcmp) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fcd20 (libc.so.6:strncmp) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fc820 (libc.so.6:strcmp) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fdb20 (libc.so.6:memset) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x591adb0 (libc.so.6:wcschr) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fccc0 (libc.so.6:strnlen) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fc890 (libc.so.6:strcspn) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fdd80 (libc.so.6:strncasecmp) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fc860 (libc.so.6:strcpy) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fdec0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fcdc0 (libc.so.6:strpbrk) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fc7e0 (libc.so.6:index) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fcc90 (libc.so.6:strlen) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x5907380 (libc.so.6:memrchr) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fddd0 (libc.so.6:strcasecmp_l) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fd9c0 (libc.so.6:memchr) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x591bb70 (libc.so.6:wcslen) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fd070 (libc.so.6:strspn) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fdd00 (libc.so.6:stpncpy) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fdcd0 (libc.so.6:stpcpy) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58ff4b0 (libc.so.6:strchrnul) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x58fde20 (libc.so.6:strncasecmp_l) redirected to 0x4a2c6e0 (_vgnU_ifunc_wrapper)
--21745-- REDIR: 0x59ed280 (libc.so.6:__strrchr_avx2) redirected to 0x4c34730 (rindex)
--21745-- REDIR: 0x59ed450 (libc.so.6:__strlen_avx2) redirected to 0x4c34cf0 (strlen)
--21745-- REDIR: 0x59e9a60 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x4c37e00 (bcmp)
--21745-- REDIR: 0x59e43d0 (libc.so.6:__strncmp_sse42) redirected to 0x4c35570 (__strncmp_sse42)
--21745-- REDIR: 0x58f6020 (libc.so.6:malloc) redirected to 0x4c31aa0 (malloc)
--21745-- REDIR: 0x4ef0610 (libstdc++.so.6:operator new(unsigned long)) redirected to 0x4c32110 (operator new(unsigned long))
--21745-- REDIR: 0x59ed990 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x4c386e0 (memmove)
--21745-- REDIR: 0x59e92e0 (libc.so.6:__memchr_avx2) redirected to 0x4c35f80 (memchr)
--21745-- REDIR: 0x58fd5a0 (libc.so.6:__GI_strstr) redirected to 0x4c39760 (__strstr_sse2)
--21745-- REDIR: 0x4ef0670 (libstdc++.so.6:operator new[](unsigned long)) redirected to 0x4c32830 (operator new[](unsigned long))
--21745-- REDIR: 0x4eee920 (libstdc++.so.6:operator delete(void*)) redirected to 0x4c331d0 (operator delete(void*))
--21745-- REDIR: 0x58f6910 (libc.so.6:free) redirected to 0x4c32cd0 (free)
--21745-- REDIR: 0x4eee950 (libstdc++.so.6:operator delete[](void*)) redirected to 0x4c336d0 (operator delete[](void*))
--21745-- REDIR: 0x59ed970 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x4c39130 (mempcpy)
--21745-- REDIR: 0x5908b30 (libc.so.6:__strcmp_sse2_unaligned) redirected to 0x4c35da0 (strcmp)
--21745-- REDIR: 0x59ed090 (libc.so.6:__strchrnul_avx2) redirected to 0x4c39020 (strchrnul)
--21745-- REDIR: 0x59ed5e0 (libc.so.6:__strnlen_avx2) redirected to 0x4c34c90 (strnlen)
--21749-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
--21757-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
--21767-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
--21768-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
==21757== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21757-by-adam-on-???
==21757== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21757-by-adam-on-???
==21757== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21757-by-adam-on-???
==21757== 
==21757== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21757== don't want to do, unless you know exactly what you're doing,
==21757== or are doing some strange experiment):
==21757==   /usr/lib/valgrind/../../bin/vgdb --pid=21757 ...command...
==21757== 
==21757== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21757==   /path/to/gdb ./run/release/run_games
==21757== and then give GDB the following command
==21757==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21757
==21757== --pid is optional if only one valgrind process is running
==21757== 
==21749== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21749-by-adam-on-???
==21749== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21749-by-adam-on-???
==21749== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21749-by-adam-on-???
==21749== 
==21749== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21749== don't want to do, unless you know exactly what you're doing,
==21749== or are doing some strange experiment):
==21749==   /usr/lib/valgrind/../../bin/vgdb --pid=21749 ...command...
==21749== 
==21749== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21749==   /path/to/gdb ./run/release/run_games
==21749== and then give GDB the following command
==21749==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21749
==21749== --pid is optional if only one valgrind process is running
==21749== 
--21774-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
==21767== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21767-by-adam-on-???
==21767== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21767-by-adam-on-???
==21767== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21767-by-adam-on-???
==21767== 
==21767== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21767== don't want to do, unless you know exactly what you're doing,
==21767== or are doing some strange experiment):
==21767==   /usr/lib/valgrind/../../bin/vgdb --pid=21767 ...command...
==21767== 
==21767== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21767==   /path/to/gdb ./run/release/run_games
==21767== and then give GDB the following command
==21767==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21767
==21767== --pid is optional if only one valgrind process is running
==21767== 
--21775-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
==21768== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21768-by-adam-on-???
==21768== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21768-by-adam-on-???
==21768== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21768-by-adam-on-???
==21768== 
==21768== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21768== don't want to do, unless you know exactly what you're doing,
==21768== or are doing some strange experiment):
==21768==   /usr/lib/valgrind/../../bin/vgdb --pid=21768 ...command...
==21768== 
==21768== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21768==   /path/to/gdb ./run/release/run_games
==21768== and then give GDB the following command
==21768==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21768
==21768== --pid is optional if only one valgrind process is running
==21768== 
==21774== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21774-by-adam-on-???
==21774== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21774-by-adam-on-???
==21774== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21774-by-adam-on-???
==21774== 
==21774== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21774== don't want to do, unless you know exactly what you're doing,
==21774== or are doing some strange experiment):
==21774==   /usr/lib/valgrind/../../bin/vgdb --pid=21774 ...command...
==21774== 
==21774== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21774==   /path/to/gdb ./run/release/run_games
==21774== and then give GDB the following command
==21774==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21774
==21774== --pid is optional if only one valgrind process is running
==21774== 
--21776-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
--21777-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
==21775== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21775-by-adam-on-???
==21775== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21775-by-adam-on-???
==21775== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21775-by-adam-on-???
==21775== 
==21775== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21775== don't want to do, unless you know exactly what you're doing,
==21775== or are doing some strange experiment):
==21775==   /usr/lib/valgrind/../../bin/vgdb --pid=21775 ...command...
==21775== 
==21775== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21775==   /path/to/gdb ./run/release/run_games
==21775== and then give GDB the following command
==21775==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21775
==21775== --pid is optional if only one valgrind process is running
==21775== 
--21778-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
==21776== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21776-by-adam-on-???
==21776== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21776-by-adam-on-???
==21776== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21776-by-adam-on-???
==21776== 
==21776== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21776== don't want to do, unless you know exactly what you're doing,
==21776== or are doing some strange experiment):
==21776==   /usr/lib/valgrind/../../bin/vgdb --pid=21776 ...command...
==21776== 
==21776== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21776==   /path/to/gdb ./run/release/run_games
==21776== and then give GDB the following command
==21776==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21776
==21776== --pid is optional if only one valgrind process is running
==21776== 
--21779-- REDIR: 0x59ede10 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4c385d0 (memset)
==21777== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21777-by-adam-on-???
==21777== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21777-by-adam-on-???
==21777== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21777-by-adam-on-???
==21777== 
==21777== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21777== don't want to do, unless you know exactly what you're doing,
==21777== or are doing some strange experiment):
==21777==   /usr/lib/valgrind/../../bin/vgdb --pid=21777 ...command...
==21777== 
==21777== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21777==   /path/to/gdb ./run/release/run_games
==21777== and then give GDB the following command
==21777==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21777
==21777== --pid is optional if only one valgrind process is running
==21777== 
==21778== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21778-by-adam-on-???
==21778== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21778-by-adam-on-???
==21778== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21778-by-adam-on-???
==21778== 
==21778== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21778== don't want to do, unless you know exactly what you're doing,
==21778== or are doing some strange experiment):
==21778==   /usr/lib/valgrind/../../bin/vgdb --pid=21778 ...command...
==21778== 
==21778== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21778==   /path/to/gdb ./run/release/run_games
==21778== and then give GDB the following command
==21778==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21778
==21778== --pid is optional if only one valgrind process is running
==21778== 
==21779== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21779-by-adam-on-???
==21779== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21779-by-adam-on-???
==21779== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21779-by-adam-on-???
==21779== 
==21779== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21779== don't want to do, unless you know exactly what you're doing,
==21779== or are doing some strange experiment):
==21779==   /usr/lib/valgrind/../../bin/vgdb --pid=21779 ...command...
==21779== 
==21779== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21779==   /path/to/gdb ./run/release/run_games
==21779== and then give GDB the following command
==21779==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=21779
==21779== --pid is optional if only one valgrind process is running
==21779== 
==21757== 
==21757== HEAP SUMMARY:
==21757==     in use at exit: 73 bytes in 3 blocks
==21757==   total heap usage: 2,743 allocs, 2,740 frees, 236,379 bytes allocated
==21757== 
==21757== Searching for pointers to 3 not-freed blocks
==21757== Checked 122,432 bytes
==21757== 
==21757== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21757==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21757==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21757==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21757== 
==21757== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21757==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21757==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21757== 
==21757== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21757==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21757==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21757==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21757==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21757== 
==21757== LEAK SUMMARY:
==21757==    definitely lost: 0 bytes in 0 blocks
==21757==    indirectly lost: 0 bytes in 0 blocks
==21757==      possibly lost: 0 bytes in 0 blocks
==21757==    still reachable: 73 bytes in 3 blocks
==21757==         suppressed: 0 bytes in 0 blocks
==21757== 
==21757== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21757== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21775== 
==21775== HEAP SUMMARY:
==21775==     in use at exit: 73 bytes in 3 blocks
==21775==   total heap usage: 841 allocs, 838 frees, 155,813 bytes allocated
==21775== 
==21775== Searching for pointers to 3 not-freed blocks
==21775== Checked 122,432 bytes
==21775== 
==21775== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21775==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21775==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21775==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21775== 
==21775== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21775==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21775==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21775== 
==21775== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21775==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21775==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21775==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21775==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21775== 
==21775== LEAK SUMMARY:
==21775==    definitely lost: 0 bytes in 0 blocks
==21775==    indirectly lost: 0 bytes in 0 blocks
==21775==      possibly lost: 0 bytes in 0 blocks
==21775==    still reachable: 73 bytes in 3 blocks
==21775==         suppressed: 0 bytes in 0 blocks
==21775== 
==21775== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21775== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21767== 
==21767== HEAP SUMMARY:
==21767==     in use at exit: 73 bytes in 3 blocks
==21767==   total heap usage: 8,644 allocs, 8,641 frees, 461,277 bytes allocated
==21767== 
==21767== Searching for pointers to 3 not-freed blocks
==21767== Checked 122,432 bytes
==21767== 
==21767== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21767==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21767==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21767==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21767== 
==21767== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21767==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21767==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21767== 
==21767== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21767==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21767==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21767==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21767==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21767== 
==21767== LEAK SUMMARY:
==21767==    definitely lost: 0 bytes in 0 blocks
==21767==    indirectly lost: 0 bytes in 0 blocks
==21767==      possibly lost: 0 bytes in 0 blocks
==21767==    still reachable: 73 bytes in 3 blocks
==21767==         suppressed: 0 bytes in 0 blocks
==21767== 
==21767== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21767== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21779== 
==21779== HEAP SUMMARY:
==21779==     in use at exit: 73 bytes in 3 blocks
==21779==   total heap usage: 6,740 allocs, 6,737 frees, 419,018 bytes allocated
==21779== 
==21779== Searching for pointers to 3 not-freed blocks
==21779== Checked 122,432 bytes
==21779== 
==21779== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21779==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21779==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21779==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21779== 
==21779== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21779==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21779==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21779== 
==21779== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21779==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21779==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21779==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21779==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21779== 
==21779== LEAK SUMMARY:
==21779==    definitely lost: 0 bytes in 0 blocks
==21779==    indirectly lost: 0 bytes in 0 blocks
==21779==      possibly lost: 0 bytes in 0 blocks
==21779==    still reachable: 73 bytes in 3 blocks
==21779==         suppressed: 0 bytes in 0 blocks
==21779== 
==21779== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21779== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21749== 
==21749== HEAP SUMMARY:
==21749==     in use at exit: 73 bytes in 3 blocks
==21749==   total heap usage: 6,450 allocs, 6,447 frees, 408,646 bytes allocated
==21749== 
==21749== Searching for pointers to 3 not-freed blocks
==21749== Checked 122,432 bytes
==21749== 
==21749== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21749==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21749==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21749==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21749== 
==21749== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21749==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21749==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21749== 
==21749== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21749==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21749==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21749==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21749==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21749== 
==21749== LEAK SUMMARY:
==21749==    definitely lost: 0 bytes in 0 blocks
==21749==    indirectly lost: 0 bytes in 0 blocks
==21749==      possibly lost: 0 bytes in 0 blocks
==21749==    still reachable: 73 bytes in 3 blocks
==21749==         suppressed: 0 bytes in 0 blocks
==21749== 
==21749== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21749== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21768== 
==21768== HEAP SUMMARY:
==21768==     in use at exit: 73 bytes in 3 blocks
==21768==   total heap usage: 8,883 allocs, 8,880 frees, 459,355 bytes allocated
==21768== 
==21768== Searching for pointers to 3 not-freed blocks
==21768== Checked 122,432 bytes
==21768== 
==21768== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21768==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21768==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21768==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21768== 
==21768== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21768==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21768==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21768== 
==21768== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21768==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21768==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21768==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21768==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21768== 
==21768== LEAK SUMMARY:
==21768==    definitely lost: 0 bytes in 0 blocks
==21768==    indirectly lost: 0 bytes in 0 blocks
==21768==      possibly lost: 0 bytes in 0 blocks
==21768==    still reachable: 73 bytes in 3 blocks
==21768==         suppressed: 0 bytes in 0 blocks
==21768== 
==21768== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21768== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21777== 
==21777== HEAP SUMMARY:
==21777==     in use at exit: 73 bytes in 3 blocks
==21777==   total heap usage: 5,979 allocs, 5,976 frees, 387,738 bytes allocated
==21777== 
==21777== Searching for pointers to 3 not-freed blocks
==21777== Checked 122,432 bytes
==21777== 
==21777== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21777==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21777==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21777==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21777== 
==21777== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21777==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21777==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21777== 
==21777== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21777==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21777==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21777==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21777==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21777== 
==21777== LEAK SUMMARY:
==21777==    definitely lost: 0 bytes in 0 blocks
==21777==    indirectly lost: 0 bytes in 0 blocks
==21777==      possibly lost: 0 bytes in 0 blocks
==21777==    still reachable: 73 bytes in 3 blocks
==21777==         suppressed: 0 bytes in 0 blocks
==21777== 
==21777== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21777== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21776== 
==21776== HEAP SUMMARY:
==21776==     in use at exit: 73 bytes in 3 blocks
==21776==   total heap usage: 6,719 allocs, 6,716 frees, 420,563 bytes allocated
==21776== 
==21776== Searching for pointers to 3 not-freed blocks
==21776== Checked 122,432 bytes
==21776== 
==21776== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21776==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21776==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21776==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21776== 
==21776== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21776==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21776==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21776== 
==21776== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21776==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21776==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21776==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21776==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21776== 
==21776== LEAK SUMMARY:
==21776==    definitely lost: 0 bytes in 0 blocks
==21776==    indirectly lost: 0 bytes in 0 blocks
==21776==      possibly lost: 0 bytes in 0 blocks
==21776==    still reachable: 73 bytes in 3 blocks
==21776==         suppressed: 0 bytes in 0 blocks
==21776== 
==21776== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21776== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21778== 
==21778== HEAP SUMMARY:
==21778==     in use at exit: 73 bytes in 3 blocks
==21778==   total heap usage: 6,389 allocs, 6,386 frees, 404,060 bytes allocated
==21778== 
==21778== Searching for pointers to 3 not-freed blocks
==21778== Checked 122,432 bytes
==21778== 
==21778== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21778==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21778==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21778==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21778== 
==21778== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21778==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21778==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21778== 
==21778== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21778==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21778==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21778==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21778==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21778== 
==21778== LEAK SUMMARY:
==21778==    definitely lost: 0 bytes in 0 blocks
==21778==    indirectly lost: 0 bytes in 0 blocks
==21778==      possibly lost: 0 bytes in 0 blocks
==21778==    still reachable: 73 bytes in 3 blocks
==21778==         suppressed: 0 bytes in 0 blocks
==21778== 
==21778== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21778== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21774== 
==21774== HEAP SUMMARY:
==21774==     in use at exit: 73 bytes in 3 blocks
==21774==   total heap usage: 8,107 allocs, 8,104 frees, 447,322 bytes allocated
==21774== 
==21774== Searching for pointers to 3 not-freed blocks
==21774== Checked 122,432 bytes
==21774== 
==21774== 19 bytes in 1 blocks are still reachable in loss record 1 of 3
==21774==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21774==    by 0x138C71: Params::Params(Params const&) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21774==    by 0x10CBBE: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21774== 
==21774== 23 bytes in 1 blocks are still reachable in loss record 2 of 3
==21774==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21774==    by 0x10CEA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21774== 
==21774== 31 bytes in 1 blocks are still reachable in loss record 3 of 3
==21774==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21774==    by 0x10F557: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21774==    by 0x10E5E8: params_loader::load_cfg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21774==    by 0x10CAA4: main (in /home/adam/monte-carlo-security-games/cpp-games/run/release/run_games)
==21774== 
==21774== LEAK SUMMARY:
==21774==    definitely lost: 0 bytes in 0 blocks
==21774==    indirectly lost: 0 bytes in 0 blocks
==21774==      possibly lost: 0 bytes in 0 blocks
==21774==    still reachable: 73 bytes in 3 blocks
==21774==         suppressed: 0 bytes in 0 blocks
==21774== 
==21774== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21774== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21745== 
==21745== HEAP SUMMARY:
==21745==     in use at exit: 0 bytes in 0 blocks
==21745==   total heap usage: 633 allocs, 633 frees, 137,130 bytes allocated
==21745== 
==21745== All heap blocks were freed -- no leaks are possible
==21745== 
==21745== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==21745== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
